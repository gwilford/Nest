#!/opt/local/bin/perl

use strict;
use warnings;
use Data::Dumper;
use lib "/home/pi/perl5/lib/perl5";
use JSON "decode_json";

my $structure = $ARGV[0];
my $thermostat = $ARGV[1];
my $away = "";

open(OUT, ">>nest-streaming.json") || die;
open(EVENTLOG, ">>thermometer.evt") || die;
select(EVENTLOG); $| = 1;
select(STDOUT); $| = 1;

sub initlock {
	flock(OUT, 2);
	seek(OUT, 0, 0);
	truncate(OUT, 0);
}

sub unlock {
	flock(OUT, 8);
}	

sub event {
	printf(EVENTLOG "%d %s\n", time(), $_[0]);
}

sub timestamp {
	print STDOUT localtime() . ": " . $_[0] . "\n";
}

timestamp("--start--");
while (<STDIN>) {
	chomp();
	# only respond to events
	/^event:\ (\S+)/ || next;
	if ($1 eq 'put') {
		my $data = <STDIN>;
		$data =~ s/^data:\ //;

		my $hash = decode_json($data);
		my $newaway = $hash->{data}->{structures}->{$structure}->{away};
		if ($away) {
			if ($away ne $newaway) {
				event($newaway);
				timestamp("change away=$newaway");
			}
		} else {
			timestamp("initalise away=$newaway");
		}
		$away = $newaway;

		initlock();
		print OUT $data;
		unlock();

	} elsif ($1 eq "keep-alive") {
		# don't log keep-alives
		next;
	}
	timestamp($1);
}
timestamp("--stop--");
close(EVENTLOG);
close(OUT);
