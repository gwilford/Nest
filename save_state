#!/opt/local/bin/perl

use strict;
use warnings;
use Data::Dumper;
use lib "/home/pi/perl5/lib/perl5";
use JSON "decode_json";
use RRD::Simple;

# could use HTTP::Tiny rather than curl...

my $structure = $ARGV[0];
my $thermostat = $ARGV[1];
my $away = "";
my $target = "";
my $ambient = "";
my $humidity = "";
my $rrd = RRD::Simple->new( file => "/home/pi/Nest/thermostat.rrd" );

open(EVENTLOG, ">>thermometer.evt") || die;
select(EVENTLOG); $| = 1;
select(STDOUT); $| = 1;

sub event {
	printf(EVENTLOG "%d %s\n", time(), $_[0]);
}

sub timestamp {
	print STDOUT localtime() . ": " . $_[0] . "\n";
}

timestamp("--start--");
while (<STDIN>) {
	chomp();
	# only respond to events
	/^event:\ (\S+)/ || next;
	if ($1 eq 'put') {
		my $data = <STDIN>;
		$data =~ s/^data:\ //;

		my $hash = decode_json($data);
		my $newaway = $hash->{data}->{structures}->{$structure}->{away};
		$ambient = $hash->{data}->{devices}->{thermostats}->{$thermostat}->{ambient_temperature_c};
		$target = $hash->{data}->{devices}->{thermostats}->{$thermostat}->{target_temperature_c};
		$humidity = $hash->{data}->{devices}->{thermostats}->{$thermostat}->{humidity};
		$rrd->update( Target_temp => $target, Ambient_temp => $ambient, 
			      Humidity => $humidity, Away => $away ne "home");
		if ($away) {
			if ($away ne $newaway) {
				event($newaway);
				timestamp("change away=$newaway");
			}
		} else {
			timestamp("initalise away=$newaway");
		}
		$away = $newaway;
	} elsif ($1 eq "keep-alive") {
		# don't log keep-alives
		my $data = <STDIN>;
		next;
	}
	my $s = sprintf("N:%.1f:%.1f:%.1f:%d", $ambient, $target, $humidity, $away ne "home");
	timestamp("$1 $s");
}
timestamp("--stop--");
close(EVENTLOG);
